{"version":3,"sources":["reportWebVitals.js","serviceWorkerRegistration.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Components/Header.js","constants.js","Containers/AppRedux.js","actions.js","reducers.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","id","name","email","className","alt","src","CardList","CardComponentList","robots","map","robot","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","children","style","overflowY","height","ErrorBoundry","props","hasError","info","this","setState","Component","Header","React","memo","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","response","json","data","useEffect","filteredRobots","filter","toLowerCase","includes","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","AppRedux","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.21fb0e59.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className='tc bg-light-green dib br3 ma2 grow bw2 shadow-s'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{ name }</h2>\r\n        <p>{ email }</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n  const CardComponentList = robots.map(robot => {\r\n    return <Card key={robot.id} {...robot} />\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      {CardComponentList}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        aria-label='Search Robots'\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='Search Robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox;","const Scroll = ({ children }) => {\r\n  return (\r\n    <div style={{ overflowY: 'scroll', height: '800px' }}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;","import { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Ooooops. That is not good</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\n\r\nconst Header = () => {\r\n  console.log('HEADER');\r\n  return <h1 className=\"f1\">RoboFriends</h1>\r\n}\r\n\r\nexport default React.memo(Header);\r\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import React, { useEffect } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport \"./App.css\";\r\nimport CardList from \"../Components/CardList\";\r\nimport SearchBox from \"../Components/SearchBox\";\r\nimport Scroll from \"../Components/Scroll\";\r\nimport ErrorBoundry from \"../Components/ErrorBoundry\";\r\nimport Header from '../Components/Header';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nfunction App(props) {\r\n\r\n  const { searchField, onSearchChange, onRequestRobots, robots, isPending } = props;\r\n\r\n  useEffect(() => {\r\n    onRequestRobots();\r\n  }, [onRequestRobots])\r\n\r\n\r\n  const filteredRobots = robots.filter((robot) => {\r\n    return robot.name\r\n      .toLowerCase()\r\n      .includes(searchField.toLowerCase());\r\n  });\r\n\r\n  return isPending ?\r\n    <h1 className=\"tc f1\">Loading...</h1>\r\n  :\r\n    (\r\n      <div className=\"tc\">\r\n        <Header />\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCHFIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      // return Object.assign({}, state, { searchField: action.payload });\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch(action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      // return Object.assign({}, state, { isPending: true });\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      // return Object.assign({}, state, { isPending: false, robots: action.payload });\r\n      return { ...state, isPending: false, robots: action.payload };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      // return Object.assign({}, state, { isPending: false, error: action.payload });\r\n      return { ...state, isPending: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport './index.css';\n\n// import App from './Containers/App';\n// import AppHooks from './Containers/AppHooks';\nimport AppRedux from './Containers/AppRedux';\n\nimport 'tachyons'; // Templates\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducers';\n\n// middlewares\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App/> */}\n    {/* <AppHooks/> */}\n    <Provider store={store}>\n      <AppRedux/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();"],"sourceRoot":""}